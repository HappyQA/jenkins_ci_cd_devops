#!groovy

@Library('tetrasoft') _

properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
    parameters([
            [$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',
            name: 'VERSION',
            description: 'Release version',
            referencedParameters: '',
            filterLength: 1, filterable: false, randomName: 'choice-parameter-415678720404050',
            script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: ''],
                script: [classpath: [], sandbox: false,
                    script: '''
                        import org.thoughtslive.jenkins.plugins.jira.service.JiraService;
                        import org.thoughtslive.jenkins.plugins.jira.Site;
                        import hudson.model.*

                        final Site config = new Site("JIRA_SERVER", new URL("http://jira/"), "BASIC", 10000);
                        config.setUserName('a.stupin')
                        config.setPassword('12345678');
                        def service = new JiraService(config);
                        def versions = service.getProjectVersions('RIGSPACE')

                        //sorting versions from jira to jenkins parameters

                        def versionArraySort = { a1, a2 ->
                            def headCompare = a1[0] <=> a2[0]
                            if (a1.size() == 1 || a2.size() == 1 || headCompare != 0) {
                                return headCompare
                            } else {
                                return recurse(a1[1..-1], a2[1..-1])
                            }
                        }
                        recurse = versionArraySort
                        def versionStringSort = { s1, s2 ->
                            def nums = { it.tokenize('.').collect{ it.toInteger() } }
                            versionArraySort(nums(s1), nums(s2))
                        }
                        return versions.data.findAll{it.released == true}.name.sort(versionStringSort).reverse()[0..5]
                    ''']]],
            booleanParam(defaultValue: false, description: 'Собрать из тега', name: 'USE_TAG')
        ])
])

pipeline {

    environment {
        TAG = "$VERSION"
        RELEASE_BRANCH = git.getReleaseBranchName("$VERSION")
        PROJECT_NAME = "rig_space"
        PROJECT_KEY = "RIGSPACE"
        CURRENT_MODULE_NAME = ""
    }

    agent any

    tools {
        maven 'Maven3.6.0'
        nodejs 'NodeJS 10'
        jdk 'java11'
        nodejs 'nodejs-jest'

    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }

    stages {
        stage ('VCS') {
            steps {
                script {
                    sh "git fetch --prune"
                    if (params.USE_TAG) {
                        echo "Checkout to the git tag '$TAG'"
                        sh "git checkout $TAG"
                    } else {
                        if(git.isFixBuild("$VERSION")) {
                            echo "Checkout to release branch '$RELEASE_BRANCH'"
                            sh "git checkout $RELEASE_BRANCH"
                            sh "git pull"
                            sh "git pull --tags"
                        } else {
                            echo "Creating branch '$RELEASE_BRANCH'"
                            sh "git branch -d $RELEASE_BRANCH | true"
                            sh "git checkout -b $RELEASE_BRANCH"
                            sh "git push --set-upstream origin $RELEASE_BRANCH"
                        }
                        echo "create tag '$VERSION'"
                        sh "git tag -f $TAG -m 'tag has been set a jenkins'"
                        sh "git push --tags -f origin"
                    }
                }
            }
        }
                
        stage ('Prepare workspace') {
            steps {
                sh "mvn clean"
            }
        }

        stage ('Prepare Frontend from MonoRepo') {
            steps {
                script {
                    dir("angular/") {
                        sh "npm i"
                    }
                }
            }
        }

        stage ('Build Backend and Frontend') {
            steps {
                script {
                    buildApplication("authentication")
                    buildApplication("admin")
                    buildApplication("reporting")                                 
                }
            }
        }
     
        stage ('Deploy on QAA instance') {
            steps {
                echo 'Delivery distrib on QAA env'
                deployAllApplications("rig_space_qaa")
            }    
        }
    }
}

def buildApplication (String app) {
    dir("angular/") {
        sh "npx nx build ${app} -c test"  
        sh "echo \"<pre>Jira version: $VERSION\n${git.getLastCommitInfo()}</pre>\" > ../rig_space_${app}/frontend/version.html"
    }                  
    sh "mvn clean package -pl rig_space_${app} -am -P production"
}                 

def deployAllApplications (String path_to) {
    echo "Deploy all applications"
    deployApplication("authentication", "$path_to")
    deployApplication("admin", "$path_to")
    deployApplication("reporting", "$path_to")
}

def deployApplication (String app, String path_to) {
    echo "Deploy $app"
    sshPublisher(publishers: [sshPublisherDesc(
                            configName: 'production8_qaa',
                            transfers: [
                                // remove previous build
                                sshTransfer(
                                    excludes: '',
                                    execCommand: "rm -r --force ~/$path_to/$app/{lib,frontend}",
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: '',
                                    remoteDirectorySDF: false,
                                    removePrefix: '',
                                    sourceFiles: ''
                                ),
                                // app distrib
                                sshTransfer(
                                    excludes: "rig_space_$app/target/distrib/resources/,rig_space_$app/target/distrib/${app}.sh",
                                    execCommand: "chmod +x ~/$path_to/$app/${app}.sh",
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: "$path_to/$app",
                                    remoteDirectorySDF: false,
                                    removePrefix: "rig_space_$app/target/distrib/",
                                    sourceFiles: "rig_space_$app/target/distrib/",
                                    usePty: true
                                )],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false)])
}