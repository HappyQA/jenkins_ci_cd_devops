#!groovy


@Library('tetrasoft') _

properties([[$class: 'RebuildSettings', autoRebuild: false, rebuildDisabled: false],
    parameters([
            booleanParam(defaultValue: false, description: 'Build and Deploy Frontend / Backend with tests', name: 'GO')
        ])
])

pipeline {
    
    agent any

    tools {
        maven 'Maven3.6.0'
        nodejs 'NodeJS 10'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }

    stages {

        stage ('Mvn clean') {
            steps {
                script {
                    sh "mvn clean"
                }                            
            }
        }

        stage ('Build Frontend') {
            steps {
                script {
                    if (params.GO)
                    dir('angular/') {
                        sh "npm i"
                        sh "npx nx run-many --target=test --projects=admin,authentication,monitoring --parallel=true --maxParallel=3"
                        sh "npx nx run-many --target=build --projects=admin,authentication,monitoring --parallel=true --maxParallel=3 --prod"
                    }                            
                }
            }
        }

        stage ('Build Backend') {
            steps {
                script {
                    if (params.GO) {
                        sh "mvn package -pl rig_space_authentication -am -P production"
                        sh "mvn package -pl rig_space_admin -am -P production"
                        sh "mvn package -pl rig_space_monitoring -am -P production"
                    }
                }
            }
        }

        stage ('Deploy') {
            steps {
                script {
                    deployAllApplications("rig_space_qa")
                }
            }
        }
    }
}

def deployAllApplications(String path_to) {
    echo "Deploy all applications"
    deployApplication("authentication", "$path_to")
    deployApplication("admin", "$path_to")
    deployApplication("monitoring", "$path_to")
}

def deployApplication(String app, String path_to) {
    echo "Deploy $app"
    sshPublisher(publishers: [sshPublisherDesc(
                            configName: 'monitoring',
                            transfers: [
                                // remove previous build
                                sshTransfer(
                                    excludes: '',
                                    execCommand: "rm -r --force ~/$path_to/$app/{frontend,lib}",
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: '',
                                    remoteDirectorySDF: false,
                                    removePrefix: '',
                                    sourceFiles: ''
                                ),
                                // app distrib
                                sshTransfer(
                                    excludes: "rig_space_$app/target/distrib/resources/,rig_space_$app/target/distrib/${app}.sh",
                                    execCommand: "chmod +x ~/$path_to/$app/${app}.sh && ~/$path_to/$app/${app}.sh -a restart",
                                    execTimeout: 120000,
                                    flatten: false,
                                    makeEmptyDirs: false,
                                    noDefaultExcludes: false,
                                    patternSeparator: '[, ]+',
                                    remoteDirectory: "$path_to/$app",
                                    remoteDirectorySDF: false,
                                    removePrefix: "rig_space_$app/target/distrib/",
                                    sourceFiles: "rig_space_$app/target/distrib/",
                                    usePty: true
                                )],
                                usePromotionTimestamp: false,
                                useWorkspaceInPromotion: false,
                                verbose: false)])
}
